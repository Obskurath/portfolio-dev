---
import Home from "@icons/HomeIcon.astro";
import About from "@icons/AboutIcon.astro";
import Skills from "@icons/SkillsIcon.astro";
import Projects from "@icons/ProjectsIcon.astro";
import Mail from "@icons/Mail.astro";

---

<nav
  class="hidden lg:flex flex-col fixed h-fit w-fit bg-[#1A1E23] top-[20%] left-[3%] z-50 rounded-full px-2 py-2 grid gap-5 gap-y-3 border-[1px] "
>
<a
href="#top"
class="rounded-full transition-all ease-in duration-[200ms] hover:bg-white hover:text-black"
>
<Home class="size-7 p-[7px]" aria-label="Home"/>
</a>
<a
href="#about"
class="rounded-full transition-all ease-in duration-[200ms] hover:bg-white hover:text-black"
>
<About class="size-7 p-[7px]" aria-label="About Me"/>
</a>
<a
href="#skills"
class="rounded-full transition-all ease-in duration-[200ms] hover:bg-white hover:text-black"
>
<Skills class="size-7 p-[7px]" aria-label="Skills"/>
</a>
<a
href="#projects"
class="rounded-full transition-all ease-in duration-[200ms] hover:bg-white hover:text-black"
>
<Projects class="size-7 p-[7px]" aria-label="Projects"/>
</a>
<a
href="#contact"
class="rounded-full transition-all ease-in duration-[200ms] hover:bg-white hover:text-black"
>
<Mail class="size-7 p-[7px]" aria-label="Contact Me"/>
</a>

</nav>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section");
    const navLinks = document.querySelectorAll("nav a");

    let isClickActive = false; // Control variable
    let lastScrollY = window.scrollY; // To detect the scroll direction

    // Function to activate a specific icon
    function activateIcon(link: HTMLAnchorElement) {
      navLinks.forEach((navLink) => navLink.classList.remove("active"));
      link.classList.add("active");
    }

    // Function to activate the Home icon
    function activateHomeIcon() {
      if (!isClickActive) {
        activateIcon(
          document.querySelector('nav a[href="#top"]') as HTMLAnchorElement
        );
      }
    }

    // Check the initial scroll position
    if (window.scrollY === 0) {
      activateHomeIcon();
    }

    const observer = new IntersectionObserver(
      (entries) => {
        if (!isClickActive) {
          let activeSectionFound = false;

          entries.forEach((entry) => {
            const id = entry.target.getAttribute("id");
            const navLink = document.querySelector(
              `nav a[href="#${id}"]`
            ) as HTMLAnchorElement;

            if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
              activateIcon(navLink);
              activeSectionFound = true;
            }
          });

          if (!activeSectionFound && window.scrollY > 0) {
            let closestSection: Element | null = null;
            let minDistance = Number.POSITIVE_INFINITY;

            sections.forEach((section) => {
              const rect = section.getBoundingClientRect();
              const distance = Math.abs(rect.top - window.innerHeight / 2);

              if (distance < minDistance) {
                minDistance = distance;
                closestSection = section;
              }
            });

            if (closestSection) {
              const closestNavLink = document.querySelector(
                `nav a[href="#${(closestSection as { id: string }).id}"]`
              ) as HTMLAnchorElement;
              activateIcon(closestNavLink);
            }
          }
        }
      },
      { threshold: [0.5] } // Adjusted threshold for a faster transition
    );

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Scroll event to detect the top of the page
    window.addEventListener("scroll", () => {
      if (window.scrollY === 0) {
        activateHomeIcon();
      }

      // Check the scroll direction
      if (!isClickActive) {
        requestAnimationFrame(() => {
          const currentScrollY = window.scrollY;
          const scrollingDown = currentScrollY > lastScrollY;
          lastScrollY = currentScrollY;

          if (!scrollingDown) {
            observer.takeRecords();
          }
        });
      }
    });

    // Click event to manually activate the icon
    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        isClickActive = true; // ActivaciÃ³n por clic
        activateIcon(link as HTMLAnchorElement);

        // Deactivate control after a short time to allow activation by scroll again
        setTimeout(() => {
          isClickActive = false;
        }, 500); // Adjust the control time for a smoother transition
      });
    });

    // Force immediate observation of sections in case any are visible
    observer.takeRecords();
  });
</script>

<style>
  nav a.active {
    background-color: white;
    color: black;
  }
</style>
