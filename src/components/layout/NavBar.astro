---
import Home from "@components/layout/navbar/Home.astro";
import About from "@components/layout/navbar/About.astro";
import Skills from "@components/layout/navbar/Skills.astro";
import Projects from "@components/layout/navbar/Projects.astro";
import Contact from "@components/layout/navbar/Contact.astro";
---

<nav
  class="hidden lg:flex flex-col fixed h-fit w-fit bg-[#1A1E23] top-[20%] left-[3%] z-50 rounded-full px-2 py-2 grid gap-5 gap-y-3 border-[1px] "
>
  <Home />
  
  <About />
  
  <Skills />
  
  <Projects />

  <Contact />
  
</nav>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section");
    const navLinks = document.querySelectorAll("nav a");

    let isClickActive = false; // Variable de control
    let lastScrollY = window.scrollY; // Para detectar la dirección del scroll

    // Función para activar un ícono específico
    function activateIcon(link: HTMLAnchorElement) {
      navLinks.forEach((navLink) => navLink.classList.remove("active"));
      link.classList.add("active");
    }

    // Función para activar el ícono de Home
    function activateHomeIcon() {
      if (!isClickActive) {
        activateIcon(
          document.querySelector('nav a[href="#top"]') as HTMLAnchorElement
        );
      }
    }

    // Verifica la posición inicial del scroll
    if (window.scrollY === 0) {
      activateHomeIcon();
    }

    const observer = new IntersectionObserver(
      (entries) => {
        if (!isClickActive) {
          let activeSectionFound = false;

          entries.forEach((entry) => {
            const id = entry.target.getAttribute("id");
            const navLink = document.querySelector(
              `nav a[href="#${id}"]`
            ) as HTMLAnchorElement;

            if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
              activateIcon(navLink);
              activeSectionFound = true;
            }
          });

          if (!activeSectionFound && window.scrollY > 0) {
            let closestSection: Element | null = null;
            let minDistance = Number.POSITIVE_INFINITY;

            sections.forEach((section) => {
              const rect = section.getBoundingClientRect();
              const distance = Math.abs(rect.top - window.innerHeight / 2);

              if (distance < minDistance) {
                minDistance = distance;
                closestSection = section;
              }
            });

            if (closestSection) {
              const closestNavLink = document.querySelector(
                `nav a[href="#${(closestSection as { id: string }).id}"]`
              ) as HTMLAnchorElement;
              activateIcon(closestNavLink);
            }
          }
        }
      },
      { threshold: [0.5] } // Umbral ajustado para una transición más rápida
    );

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Evento de scroll para detectar la parte superior de la página
    window.addEventListener("scroll", () => {
      if (window.scrollY === 0) {
        activateHomeIcon();
      }

      // Verificar la dirección del scroll
      if (!isClickActive) {
        requestAnimationFrame(() => {
          const currentScrollY = window.scrollY;
          const scrollingDown = currentScrollY > lastScrollY;
          lastScrollY = currentScrollY;

          if (!scrollingDown) {
            observer.takeRecords();
          }
        });
      }
    });

    // Evento de clic para activar el ícono manualmente
    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        isClickActive = true; // Activación por clic
        activateIcon(link as HTMLAnchorElement);

        // Desactivar el control después de un breve tiempo para permitir la activación por scroll nuevamente
        setTimeout(() => {
          isClickActive = false;
        }, 500); // Ajuste del tiempo de control para una transición más suave
      });
    });

    // Forzar la observación inmediata de las secciones por si alguna es visible
    observer.takeRecords();
  });
</script>

<style>
  nav a.active {
    background-color: white;
    color: black;
  }
</style>
